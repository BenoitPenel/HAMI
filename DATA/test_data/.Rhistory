# Prédire les valeurs avec les écarts types
pred <- predict(gam_mod2, data.frame(real_RS = x), type = "response", se.fit = TRUE)
# Extraire les valeurs prédites et les écarts types
y_pred <- pred$fit
se <- pred$se.fit
# Calculer les bornes inférieures et supérieures pour les intervalles de confiance
lower <- y_pred - 1.96 * se
upper <- y_pred + 1.96 * se
# Créer un dataframe contenant les résultats
predictions <- data.frame(real_RS = x, metabarcoding_RS = y_pred, lower = lower, upper = upper)
# Tracer le graphique avec les intervalles de confiance
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Densité des points
labs(x = "Richesse réelle (spp/échantillon)", y = "Richesse estimée par approche moléculaire (spp/échantillon)") +  # Labels des axes
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Ajouter la ligne y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Ajouter la ligne prédictive
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "lightblue", alpha = 0.3) +  # Ajouter les intervalles de confiance
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
plot(gam_mod1)
library(ggplot2)
# Predict values with standard errors
pred <- predict(gam_mod2, data.frame(real_RS = x), type = "response", se.fit = TRUE)
# Extract predicted values and standard errors
y_pred <- pred$fit
se <- pred$se.fit
# Calculate lower and upper bounds for confidence intervals
lower <- y_pred - 1.96 * se
upper <- y_pred + 1.96 * se
# Create a dataframe containing the results
predictions <- data.frame(real_RS = x, metabarcoding_RS = y_pred, lower = lower, upper = upper)
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "lightblue", alpha = 0.3) +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
plot(gam_mod1)
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.3) +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray") +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.2) +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.1) +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.8) +  # Add confidence intervals
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.8) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.7) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.7) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E"),alpha=0.7) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.7) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0AA", "#89C998AA", "#5CAE7AAA", "#34996EAA", "#217D63AA", "#0B5D4EAA")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.7) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4EAA")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.7) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "gray", alpha = 0.8) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "blue", alpha = 0.8) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "blue", alpha = 0.1) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "red", alpha = 0.1) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "red", alpha = 0.3) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "darkgrey", alpha = 0.3) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "darkgrey", alpha = 0.5) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "darkgrey", alpha = 0.9) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
# Plot the graph with confidence intervals
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "darkgrey", alpha = 0.5) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
ggplot(data, aes(x = real_RS, y = metabarcoding_RS)) +
geom_bin2d(bins = 30) +  # Density of points
labs(x = "Real richness (spp/sample)", y = "Richness estimated by molecular approach (spp/sample)") +  # Axis labels
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +  # Add line y = x
geom_ribbon(data = predictions, aes(x = real_RS, ymin = lower, ymax = upper), fill = "darkgrey", alpha = 0.5) +  # Add confidence intervals
geom_line(data = predictions, aes(x = real_RS, y = metabarcoding_RS), color = "darkred") +  # Add predictive line
scale_fill_gradientn(colours = c("#C2E7B0", "#89C998", "#5CAE7A", "#34996E", "#217D63", "#0B5D4E")) +
theme_light() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_cartesian(xlim = c(0, 32), ylim = c(0, 32))
gam_mod2<-gam(metabarcoding_RS~s(real_RS,k=3),family=poisson, data=data)
summary(gam_mod2)#Pvalue<0.001 ***
AICc(gam_mod2) # 2464 Better than LM AND GAUSS GAM
## In the set folder: a multihit tsv file and an abundance tsv file.
## Search for "to modify" in this script and change values accordingly to your data.
## Dependencies: packages to install are listed below.
library(data.table)
library(tidyr)
library(dplyr)
library(dada2) # BioConductor
setwd("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data")
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep="\t",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep="\t",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
## Cleaning for the special characters []()_"0123456789.
mh$bidouille<-gsub("[\\[\\]()\"0-9]","",mh$bidouille,perl=TRUE)
mh$bidouille<-gsub(" +;",";",mh$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mh<-cbind(toto,mh[, c("observation_name" ,"blast_taxonomy")]) # observation name is the cluster ID and useful to link with the abundance tsv file
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep="\t",header=TRUE)# to modify (name of the abundance file)
e
setwd("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data")
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep="\t",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
View(mh)
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep=";",header=TRUE) # to modify (name of the multihits tsv file)
View(mt)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep="\t",header=TRUE)# to modify (name of the abundance file)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep=";",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
## Cleaning for the special characters []()_"0123456789.
mh$bidouille<-gsub("[\\[\\]()\"0-9]","",mh$bidouille,perl=TRUE)
mh$bidouille<-gsub(" +;",";",mh$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mh<-cbind(toto,mh[, c("observation_name" ,"blast_taxonomy")]) # observation name is the cluster ID and useful to link with the abundance tsv file
rm(toto)
setwd("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data")
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep=";",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep=";",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
## Cleaning for the special characters []()_"0123456789.
mh$bidouille<-gsub("[\\[\\]()\"0-9]","",mh$bidouille,perl=TRUE)
mh$bidouille<-gsub(" +;",";",mh$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mh<-cbind(toto,mh[, c("observation_name" ,"blast_taxonomy")]) # observation name is the cluster ID and useful to link with the abundance tsv file
rm(toto)
mh$tx7<-gsub("^.*(unidentified).*$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^.*(sp)\\..*$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^.*(sp)$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^[A-Z][a-z]+_[a-z\\.]+_[a-z\\-]+$","unknown species",mh$tx7,perl=TRUE)
mh$tx7[grepl("^ *$",mh$tx7)]<-"unknown species"
mh$tx7<-gsub("AS$","",mh$tx7)
mh$tx7<-gsub("DHJ$","",mh$tx7)
mh$tx7<-gsub("-GLA$","",mh$tx7)
mh$tx7<-gsub("_L.$","",mh$tx7)
mh$tx7<-gsub("_CHU$","",mh$tx7)
## Ignoring of 'unknown species' or 'unknown genus' under a threshold
thresh=0.5 # to modify % threshold below which 'unknown' are ignored
mh$clus <- as.integer(gsub("Cluster_","",mh$observation_name))
mh$blast_taxonomy<-NULL
my.genus.result <- as.data.table(unique(mh %>% add_count(clus, tx1, tx2, tx3, tx4, tx5, tx6, observation_name)))
my.genus.result$ntot<-as.data.table(unique(mh %>% add_count(observation_name)))$n
setkey(my.genus.result, clus, n)
my.genus.result$prop.genus <-my.genus.result$n/my.genus.result$ntot
my.genus.result$ignore.genus <-FALSE
my.genus.result$ignore.genus <- my.genus.result$ignore.genus | (grepl("unknown",my.genus.result$tx6,perl=TRUE,ignore.case=TRUE) & my.genus.result$prop.genus <thresh)
my.species.result <- as.data.table(unique(mh %>% add_count(clus, tx1, tx2, tx3, tx4, tx5, tx6, tx7, observation_name)))
my.species.result$ntot<-as.data.table(unique(mh %>% add_count(observation_name)))$n
setkey(my.species.result, clus, n)
my.species.result$prop.species<-my.species.result$n/my.species.result$ntot
my.species.result$ignore.species<-FALSE
my.species.result$ignore.species <- my.species.result$ignore.species | (grepl("unknown",my.species.result$tx7,perl=TRUE,ignore.case=TRUE) & my.species.result$prop.species<thresh)
my.first.result<-merge(my.genus.result, my.species.result, by = names(my.species.result)[1:8])[,c(1:8,13,18)]
my.second.result <- data.table(observation_name=unique(my.first.result$observation_name))
for(j in 1:7) {
tx <- as.character(as.data.frame(my.first.result)[,j])
tmp <- apply(my.second.result, 1, function(r){
v <- unique(tx[(j==6 | !my.first.result$ignore.genus) & my.first.result$observation_name==r[1]])
v <- unique(tx[(j==7 | !my.first.result$ignore.species) & my.first.result$observation_name==r[1]])
if (length(v)==1) {v[1]}
else if ((length(v)==2)) {
unk <- grepl("unknown",v)
unkV <- unique(v[unk])
if (length(unkV) == 0) {
"Multi-affiliation"
} else {
unkV[1]
}
} else {
"Multi-affiliation"
}
})
my.second.result <- cbind(my.second.result, tmp)
}
## Reconstruction of the new full taxonomy from each taxonomic field for each cluster
my.mh.result <- data.table(observation_name=my.second.result$observation_name,  blast_taxonomy= apply(my.second.result, 1, function(r) {
paste(r[2:8], sep=";", collapse=";")
}))
## Cleaning for some special characters
ab$bidouille<-gsub("[\\[\\]()\"0-9]","",ab$bidouille,perl=TRUE)
ab$bidouille<-gsub(" +;",";",ab$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column in 7 taxonomic fields
toto <- toto[toto$tx7!="^[A-Z]$"]
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep=";",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep=";",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
mh$bidouille<-gsub("[\\[\\]()\"0-9]","",mh$bidouille,perl=TRUE)
mh$bidouille<-gsub(" +;",";",mh$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
View(toto)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mh<-cbind(toto,mh[, c("observation_name" ,"blast_taxonomy")]) # observation name is the cluster ID and useful to link with the abundance tsv file
## Deconstruction of the taxonomic column in 7 taxonomic fields
toto <- toto[toto$tx7!="^[A-Z]$"]
toto <- toto[toto$tx7!="^[A-Z]$"]
setwd("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data")
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep=";",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep=";",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
## Cleaning for the special characters []()_"0123456789.
mh$bidouille<-gsub("[\\[\\]()\"0-9]","",mh$bidouille,perl=TRUE)
mh$bidouille<-gsub(" +;",";",mh$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column ('blast_taxonomy') in 7 taxonomic fields
toto<- mh[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
mh<-cbind(toto,mh[, c("observation_name" ,"blast_taxonomy")]) # observation name is the cluster ID and useful to link with the abundance tsv file
rm(toto)
mh$tx7<-gsub("^.*(unidentified).*$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^.*(sp)\\..*$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^.*(sp)$","unknown species",mh$tx7,perl=TRUE)
mh$tx7<-gsub("^[A-Z][a-z]+_[a-z\\.]+_[a-z\\-]+$","unknown species",mh$tx7,perl=TRUE)
mh$tx7[grepl("^ *$",mh$tx7)]<-"unknown species"
## Delete in the species field upper letter at the end of species name
mh$tx7<-gsub("AS$","",mh$tx7)
mh$tx7<-gsub("DHJ$","",mh$tx7)
mh$tx7<-gsub("-GLA$","",mh$tx7)
mh$tx7<-gsub("_L.$","",mh$tx7)
mh$tx7<-gsub("_CHU$","",mh$tx7)
thresh=0.5 # to modify % threshold below which 'unknown' are ignored
mh$clus <- as.integer(gsub("Cluster_","",mh$observation_name))
mh$blast_taxonomy<-NULL
my.genus.result <- as.data.table(unique(mh %>% add_count(clus, tx1, tx2, tx3, tx4, tx5, tx6, observation_name)))
my.genus.result$ntot<-as.data.table(unique(mh %>% add_count(observation_name)))$n
setkey(my.genus.result, clus, n)
my.genus.result$prop.genus <-my.genus.result$n/my.genus.result$ntot
my.genus.result$ignore.genus <-FALSE
my.genus.result$ignore.genus <- my.genus.result$ignore.genus | (grepl("unknown",my.genus.result$tx6,perl=TRUE,ignore.case=TRUE) & my.genus.result$prop.genus <thresh)
#nrow(my.genus.result)
#names(my.genus.result)
my.species.result <- as.data.table(unique(mh %>% add_count(clus, tx1, tx2, tx3, tx4, tx5, tx6, tx7, observation_name)))
my.species.result$ntot<-as.data.table(unique(mh %>% add_count(observation_name)))$n
setkey(my.species.result, clus, n)
my.species.result$prop.species<-my.species.result$n/my.species.result$ntot
my.species.result$ignore.species<-FALSE
my.species.result$ignore.species <- my.species.result$ignore.species | (grepl("unknown",my.species.result$tx7,perl=TRUE,ignore.case=TRUE) & my.species.result$prop.species<thresh)
#nrow(my.species.result)
#names(my.species.result)
my.first.result<-merge(my.genus.result, my.species.result, by = names(my.species.result)[1:8])[,c(1:8,13,18)]
my.second.result <- data.table(observation_name=unique(my.first.result$observation_name))
for(j in 1:7) {
tx <- as.character(as.data.frame(my.first.result)[,j])
tmp <- apply(my.second.result, 1, function(r){
v <- unique(tx[(j==6 | !my.first.result$ignore.genus) & my.first.result$observation_name==r[1]])
v <- unique(tx[(j==7 | !my.first.result$ignore.species) & my.first.result$observation_name==r[1]])
if (length(v)==1) {v[1]}
else if ((length(v)==2)) {
unk <- grepl("unknown",v)
unkV <- unique(v[unk])
if (length(unkV) == 0) {
"Multi-affiliation"
} else {
unkV[1]
}
} else {
"Multi-affiliation"
}
})
my.second.result <- cbind(my.second.result, tmp)
}
#nrow(my.second.result)
## Reconstruction of the new full taxonomy from each taxonomic field for each cluster
my.mh.result <- data.table(observation_name=my.second.result$observation_name,  blast_taxonomy= apply(my.second.result, 1, function(r) {
paste(r[2:8], sep=";", collapse=";")
}))
ab  <- ab[ab$bidouille!="no data"]
mt<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_multi-affiliations.csv",sep=";",header=TRUE) # to modify (name of the multihits tsv file)
mh <- data.table(bidouille=mt$blast_taxonomy, blast_taxonomy=mt$blast_taxonomy, observation_name=mt$`#observation_name`)
rm(mt)
at<-fread("/home/penelben/Documents/THESE/1st_paper/HAMI_FRAMEWORK/DATA/test_data/AgriB03BB_abundance_raw.csv",sep=";",header=TRUE)# to modify (name of the abundance file)
ab <- data.table(bidouille=at$`blast_taxonomy`, blast_taxonomy=at$`blast_taxonomy`, observation_name=at$observation_name)
## Cleaning for some special characters
ab$bidouille<-gsub("[\\[\\]()\"0-9]","",ab$bidouille,perl=TRUE)
ab$bidouille<-gsub(" +;",";",ab$bidouille,perl=TRUE)
## Deconstruction of the taxonomic column in 7 taxonomic fields
ab  <- ab[ab$bidouille!="no data"]
toto<- ab[ , "bidouille"] %>% separate(bidouille,c("tx1","tx2","tx3","tx4","tx5","tx6","tx7"),";")
ab<-cbind(toto,ab[, c("observation_name" ,"blast_taxonomy")])
rm(toto)
ab$tx7<-gsub("^.*(unidentified).*$","unknown species",ab$tx7,perl=TRUE)
ab$tx7<-gsub("^.*(sp)\\..*$","unknown species",ab$tx7,perl=TRUE)
ab$tx7<-gsub("^.*(sp)$","unknown species",ab$tx7,perl=TRUE)
ab$tx7<-gsub("^[A-Z][a-z]+_[a-z\\.]+_[a-z\\-]+$","unknown species",ab$tx7,perl=TRUE)
ab$tx7[grepl("^ *$",ab$tx7)]<-"unknown species"
## Delete in the species field upper letter at the end of species name
ab$tx7<-gsub("AS$","",ab$tx7)
ab$tx7<-gsub("DHJ$","",ab$tx7)
ab$tx7<-gsub("-GLA$","",ab$tx7)
ab$tx7<-gsub("_L.$","",ab$tx7)
ab$tx7<-gsub("_CHU$","",ab$tx7)
erreur=ab[!grepl("^[A-Z][a-z]+_[a-z\\-]+$", ab$tx7) & !(ab$tx7=="unknown species") & !(ab$tx7=="Multi-affiliation"),]
erreur
